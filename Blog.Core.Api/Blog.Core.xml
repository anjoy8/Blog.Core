<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core.Api</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.Controllers.BlogController">
            <summary>
            博客管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.#ctor(Microsoft.Extensions.Logging.ILogger{Blog.Core.Controllers.BlogController})">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
            
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Get(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取博客列表【无权限】
            </summary>
            <param name="id"></param>
            <param name="page"></param>
            <param name="bcategory"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Get(System.Int64)">
            <summary>
            获取博客详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.DetailNuxtNoPer(System.Int64)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.V2_Blogtest">
            <summary>
            获取博客测试信息 v2版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Post(Blog.Core.Model.Models.BlogArticle)">
            <summary>
            添加博客【无权限】
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.AddForMVP(Blog.Core.Model.Models.BlogArticle)">
            <summary>
            
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Put(Blog.Core.Model.Models.BlogArticle)">
            <summary>
            更新博客信息
            </summary>
            <param name="BlogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Delete(System.Int64)">
            <summary>
            删除博客
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.ApacheTestUpdate">
            <summary>
            apache jemeter 压力测试
            更新接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件(主库)(一般可用第一次生成)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            获取仓储层和服务层(需指定表名和数据库)
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFilesByTableNamesForEntity(System.String[],System.String)">
            <summary>
            获取实体(需指定表名和数据库)
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFilesByTableNamesForController(System.String[],System.String)">
            <summary>
            获取控制器(需指定表名和数据库)
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetAllFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            DbFrist 根据数据库表名 生成整体框架,包含Model层(一般可用第一次生成)
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MigrateController.DataMigrateFromOld2New">
            <summary>
            获取权限部分Map数据（从库）
            迁移到新库（主库）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MigrateController.SaveData2TsvAsync">
            <summary>
            权限数据库导出tsv
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MigrateController.SaveData2ExcelAsync">
            <summary>
            权限数据库导出excel
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.HealthCheckController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.HealthCheckController.Get">
            <summary>
            健康检查接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ImgController.DownImg">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ImgController.InsertPicture(Blog.Core.Model.ViewModels.UploadFileDto)">
            <summary>
            上传图片,多文件
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.#ctor(Blog.Core.IServices.ISysUserInfoServices,Blog.Core.IServices.IUserRoleServices,Blog.Core.IServices.IRoleServices,Blog.Core.AuthHelper.PermissionRequirement,Blog.Core.IServices.IRoleModulePermissionServices,Microsoft.Extensions.Logging.ILogger{Blog.Core.Controllers.LoginController})">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.SwgLogin(Blog.Core.Controllers.SwaggerLoginRequest)">
            <summary>
            swagger登录
            </summary>
            <param name="loginRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.WxLogin(System.String,System.String)">
            <summary>
            weixin登录
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ModuleController">
            <summary>
            接口管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ModuleController.Get(System.Int32,System.String,System.Int32)">
            <summary>
            获取全部接口api
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ModuleController.Post(Blog.Core.Model.Models.Modules)">
            <summary>
            添加一条接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ModuleController.Put(Blog.Core.Model.Models.Modules)">
            <summary>
            更新接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ModuleController.Delete(System.Int64)">
            <summary>
            删除一条接口
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ModuleController.BatchPost(System.Collections.Generic.List{Blog.Core.Model.Models.Modules})">
            <summary>
            导入多条接口信息
            </summary>
            <param name="modules"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Server">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.PayController">
            <summary>
            建行聚合支付类
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.#ctor(Microsoft.Extensions.Logging.ILogger{Blog.Core.Controllers.PayController},Blog.Core.IServices.IPayServices)">
            <summary>
            构造函数
            </summary> 
            <param name="logger"></param>
            <param name="payServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayGet(Blog.Core.Model.ViewModels.PayNeedModel)">
            <summary>
            被扫支付
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayPost(Blog.Core.Model.ViewModels.PayNeedModel)">
            <summary>
            被扫支付
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayCheckGet(Blog.Core.Model.ViewModels.PayNeedModel)">
            <summary>
            支付结果查询-轮询
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayCheckPost(Blog.Core.Model.ViewModels.PayNeedModel)">
            <summary>
            支付结果查询-轮询
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayRefundGet(Blog.Core.Model.ViewModels.PayRefundNeedModel)">
            <summary>
            退款
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PayController.PayRefundPost(Blog.Core.Model.ViewModels.PayRefundNeedModel)">
            <summary>
            退款
            </summary>
            <param name="payModel"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.PermissionController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.#ctor(Blog.Core.IServices.IPermissionServices,Blog.Core.IServices.IModuleServices,Blog.Core.IServices.IRoleModulePermissionServices,Blog.Core.IServices.IUserRoleServices,Blog.Core.Repository.UnitOfWorks.IUnitOfWorkManage,System.Net.Http.IHttpClientFactory,Microsoft.AspNetCore.Http.IHttpContextAccessor,Blog.Core.Common.HttpContextUser.IUser,Blog.Core.AuthHelper.PermissionRequirement)">
            <summary>
            构造函数
            </summary>
            <param name="permissionServices"></param>
            <param name="moduleServices"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="userRoleServices"></param>
            <param name="unitOfWorkManage"></param>
            <param name="httpClientFactory"></param>
            <param name="httpContext"></param>
            <param name="user"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.Get(System.Int32,System.String,System.Int32)">
            <summary>
            获取菜单
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.GetTreeTable(System.Int64,System.String)">
            <summary>
            查询树形 Table
            </summary>
            <param name="f">父节点</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.Post(Blog.Core.Model.Models.Permission)">
            <summary>
            添加一个菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.Assign(Blog.Core.Controllers.AssignView)">
            <summary>
            保存菜单权限分配
            </summary>
            <param name="assignView"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.GetPermissionTree(System.Int64,System.Boolean)">
            <summary>
            获取菜单树
            </summary>
            <param name="pid"></param>
            <param name="needbtn"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.GetNavigationBar(System.Int64)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.GetNavigationBarPro(System.Int64)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.GetPermissionIdByRoleId(System.Int64)">
            <summary>
            通过角色获取菜单
            </summary>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.Put(Blog.Core.Model.Models.Permission)">
            <summary>
            更新菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.Delete(System.Int64)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.BatchPost(System.Collections.Generic.List{Blog.Core.Model.Models.Permission})">
            <summary>
            导入多条菜单信息
            </summary>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.PermissionController.MigratePermission(System.String,System.String,System.String,System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            系统接口菜单同步接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.RoleController.Get(System.Int32,System.String)">
            <summary>
            获取全部角色
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.RoleController.Post(Blog.Core.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.RoleController.Put(Blog.Core.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.RoleController.Delete(System.Int64)">
            <summary>
            删除角色
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.Get(System.Int32,System.String)">
            <summary>
            分页获取
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.Post(Blog.Core.Model.Models.TasksQz)">
            <summary>
            添加计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.Put(Blog.Core.Model.Models.TasksQz)">
            <summary>
            修改计划任务
            </summary>
            <param name="tasksQz"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.Delete(System.Int64)">
            <summary>
            删除一个任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.StartJob(System.Int64)">
            <summary>
            启动计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.StopJob(System.Int64)">
            <summary>
            停止一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.PauseJob(System.Int64)">
            <summary>
            暂停一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.ResumeJob(System.Int64)">
            <summary>
            恢复一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.ReCovery(System.Int64)">
            <summary>
            重启一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.GetTaskNameSpace">
            <summary>
            获取任务命名空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.ExecuteJob(System.Int64)">
            <summary>
            立即执行任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.GetTaskLogs(System.Int64,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取任务运行日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController.GetTaskOverview(System.Int64,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            任务概况
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.TopicController">
            <summary>
            类别管理【无权限】
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.TopicController.#ctor(Blog.Core.IServices.ITopicServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.TopicController.Get">
            <summary>
            获取Tibug所有分类
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.TopicDetailController">
            <summary>
            Tibug 管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.#ctor(Blog.Core.IServices.ITopicServices,Blog.Core.IServices.ITopicDetailServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
            <param name="topicDetailServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.Get(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            获取Bug数据列表（带分页）
            【无权限】
            </summary>
            <param name="page">页数</param>
            <param name="tname">专题类型</param>
            <param name="key">关键字</param>
            <param name="intPageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.Get(System.Int64)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.Post(Blog.Core.Model.Models.TopicDetail)">
            <summary>
            添加一个 BUG 【无权限】
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.Update(Blog.Core.Model.Models.TopicDetail)">
            <summary>
            更新 bug
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TopicDetailController.Delete(System.Int64)">
            <summary>
            删除 bug
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TransactionController.Delete(System.Int64)">
            <summary>
            测试事务在AOP中的使用
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.#ctor(Blog.Core.Repository.UnitOfWorks.IUnitOfWorkManage,Blog.Core.IServices.ISysUserInfoServices,Blog.Core.IServices.IUserRoleServices,Blog.Core.IServices.IRoleServices,Blog.Core.IServices.IDepartmentServices,Blog.Core.Common.HttpContextUser.IUser,AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Blog.Core.Controllers.UserController})">
            <summary>
            构造函数
            </summary>
            <param name="unitOfWorkManage"></param>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="departmentServices"></param>
            <param name="user"></param>
            <param name="mapper"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.Get(System.Int32,System.String)">
            <summary>
            获取全部用户
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.Post(Blog.Core.Model.ViewModels.SysUserInfoDto)">
            <summary>
            添加一个用户
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.Put(Blog.Core.Model.ViewModels.SysUserInfoDto)">
            <summary>
            更新用户与角色
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserController.Delete(System.Int64)">
            <summary>
            删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.UserRoleController">
            <summary>
            用户角色关系
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.#ctor(Blog.Core.IServices.ISysUserInfoServices,Blog.Core.IServices.IUserRoleServices,AutoMapper.IMapper,Blog.Core.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="mapper"></param>
            <param name="roleServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddUser(System.String,System.String)">
            <summary>
            新建用户
            </summary>
            <param name="loginName"></param>
            <param name="loginPwd"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddRole(System.String)">
            <summary>
            新建Role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.UserRoleController.AddUserRole(System.Int64,System.Int64)">
            <summary>
            新建用户角色关系
            </summary>
            <param name="uid"></param>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ValuesController">
            <summary>
            Values控制器
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestRabbitMqPublish">
            <summary>
            测试Rabbit消息队列发送
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestRabbitMqSubscribe">
            <summary>
            测试Rabbit消息队列订阅
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestSqlsugarWithCache">
            <summary>
            测试SqlSugar二级缓存
            可设置过期时间
            或通过接口方式更新该数据，也会离开清除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Get">
            <summary>
            Get方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.RedisMq(Blog.Core.Extensions.IRedisBasketRepository)">
            <summary>
            测试Redis消息队列
            </summary>
            <param name="_redisBasketRepository"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.EventBusTry(Blog.Core.EventBus.IEventBus,System.String)">
            <summary>
            测试RabbitMQ事件总线
            </summary>
            <param name="_eventBus"></param>
            <param name="blogId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Get(System.Int32)">
            <summary>
            Get(int id)方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.RequiredP(System.String)">
            <summary>
            测试参数是必填项
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.GetUserInfo(System.String)">
            <summary>
            通过 HttpContext 获取用户信息
            </summary>
            <param name="ClaimType">声明类型，默认 jti </param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Source">
            <summary>
            to redirect by route template name.
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Destination">
            <summary>
            route with template name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Post(Blog.Core.Model.Models.BlogArticle,System.Int32)">
            <summary>
            测试 post 一个对象 + 独立参数
            </summary>
            <param name="blogArticle">model实体类参数</param>
            <param name="id">独立参数</param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestPostPara(System.String)">
            <summary>
            测试 post 参数
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestMutiDBAPI">
            <summary>
            测试多库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.FluentVaTest(Blog.Core.Filter.UserRegisterVo)">
            <summary>
            测试Fulent做参数校验
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            Put方法
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            Delete方法
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.GetAllConfigByAppllo(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            测试接入Apollo获取配置信息
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.GetConfigByAppllo(System.String)">
            <summary>
            通过此处的key格式为 xx:xx:x
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.GetSnowflakeId">
            <summary>
            获取雪花Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.TestCacheAsync">
            <summary>
            测试缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ValuesController.SnowflakeIdToDateTime(System.Int64)">
            <summary>
            雪花Id To DateTime
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatCompanyController">
            <summary>
            WeChatCompanyController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.#ctor(Blog.Core.IServices.IWeChatCompanyServices)">
            <summary>
            构造函数
            </summary> 
            <param name="iWeChatCompanyServices"></param> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Get(Blog.Core.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Post(Blog.Core.Model.Models.WeChatCompany)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Put(Blog.Core.Model.Models.WeChatCompany)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.Delete(System.String)">
            <summary>
            删除
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatCompanyController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatConfigController">
            <summary>
            WeChatConfigController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.#ctor(Blog.Core.IServices.IWeChatConfigServices)">
            <summary>
            构造函数
            </summary> 
            <param name="iWeChatConfigServices"></param> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Get(Blog.Core.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Post(Blog.Core.Model.Models.WeChatConfig)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Put(Blog.Core.Model.Models.WeChatConfig)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.Delete(System.String)">
            <summary>
            删除
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatConfigController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatController">
            <summary>
            微信公众号管理 
            </summary>   
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.#ctor(Blog.Core.IServices.IWeChatConfigServices,Microsoft.Extensions.Logging.ILogger{Blog.Core.Controllers.WeChatController})">
            <summary>
            构造函数
            </summary>  
            <param name="weChatConfigServices"></param>
            <param name="logger"></param>   
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetToken(System.String)">
            <summary>
            更新Token
            </summary>
            <param name="id"></param>
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.RefreshToken(System.String)">
            <summary>
            刷新Token
            </summary>
            <param name="id"></param>
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetTemplate(System.String)">
            <summary>
            获取模板
            </summary>
            <param name="id"></param>
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetMenu(System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="id"></param>
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.UpdateMenu(Blog.Core.Model.ViewModels.WeChatApiDto)">
            <summary>
            更新菜单
            </summary>
            <param name="menu"></param>
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetSubUsers(System.String)">
            <summary>
            获取订阅用户(所有)
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.Valid(Blog.Core.Model.ViewModels.WeChatValidDto)">
            <summary>
            入口
            </summary>
            <param name="validDto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetSubUser(System.String,System.String)">
            <summary>
            获取订阅用户
            </summary>
            <param name="id"></param>
            <param name="openid"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetQRBind(Blog.Core.Model.ViewModels.WeChatUserInfo)">
            <summary>
            获取一个绑定员工公众号二维码
            </summary>
            <param name="info">消息</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.PushCardMsg(Blog.Core.Model.ViewModels.WeChatCardMsgDataDto)">
            <summary>
            推送卡片消息接口
            </summary>
            <param name="msg">卡片消息对象</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.PushCardMsgGet(Blog.Core.Model.ViewModels.WeChatCardMsgDataDto)">
            <summary>
            推送卡片消息接口
            </summary>
            <param name="msg">卡片消息对象</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.PushTxtMsg(Blog.Core.Model.ViewModels.WeChatPushTestDto)">
            <summary>
            推送文本消息
            </summary>
            <param name="msg">消息对象</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.GetBindUserInfo(Blog.Core.Model.ViewModels.WeChatUserInfo)">
            <summary>
            通过绑定用户获取微信用户信息(一般用于初次绑定检测)
            </summary>
            <param name="info">信息</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatController.UnBind(Blog.Core.Model.ViewModels.WeChatUserInfo)">
            <summary>
            用户解绑
            </summary>
            <param name="info">消息</param> 
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatPushLogController">
            <summary>
            WeChatPushLogController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.#ctor(Blog.Core.IServices.IWeChatPushLogServices)">
            <summary>
            构造函数
            </summary> 
            <param name="iWeChatPushLogServices"></param> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.Get(Blog.Core.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.Post(Blog.Core.Model.Models.WeChatPushLog)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.Put(Blog.Core.Model.Models.WeChatPushLog)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.Delete(System.String)">
            <summary>
            删除
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatPushLogController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WeChatSubController">
            <summary>
            WeChatSubController
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.#ctor(Blog.Core.IServices.IWeChatSubServices)">
            <summary>
            构造函数
            </summary> 
            <param name="iWeChatSubServices"></param> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Get(Blog.Core.Model.PaginationModel)">
            <summary>
            获取
            </summary>
            <param name="pagination">分页条件</param> 
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Get(System.String)">
            <summary>
            获取(id)
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Post(Blog.Core.Model.Models.WeChatSub)">
            <summary>
            添加
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Put(Blog.Core.Model.Models.WeChatSub)">
            <summary>
            更新
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.Delete(System.String)">
            <summary>
            删除
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:Blog.Core.Controllers.WeChatSubController.BatchDelete(System.String)">
            <summary>
            批量删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.DepartmentController.GetTreeTable(System.Int64,System.String)">
            <summary>
            查询树形 Table
            </summary>
            <param name="f">父节点</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.DepartmentController.GetDepartmentTree(System.Int64)">
            <summary>
            获取部门树
            </summary>
            <param name="pid"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.NacosController">
            <summary>
            服务管理 
            </summary>
        </member>
        <member name="F:Blog.Core.Api.Controllers.NacosController.NacosNamingService">
            <summary>
            INacosNamingService
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.#ctor(Nacos.V2.INacosNamingService)">
            <summary>
            
            </summary>
            <param name="nacosNamingService"></param>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.CheckSystemStartFinish">
            <summary>
            系统实例是否启动完成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.GetStatus">
            <summary>
            获取Nacos 状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.Register">
            <summary>
            服务上线
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.NacosController.Deregister">
            <summary>
            服务下线
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.SignalRTestController">
            <summary>
            SignalR测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SignalRTestController.SendMessageToUser(System.String,System.String)">
            <summary>
            向指定用户发送消息
            </summary>
            <param name="user"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SignalRTestController.SendMessageToRole(System.String,System.String)">
            <summary>
            向指定角色发送消息
            </summary>
            <param name="role"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.SplitDemoController">
            <summary>
            分表demo
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SplitDemoController.Get(System.DateTime,System.DateTime,System.Int32,System.String,System.Int32)">
            <summary>
            分页获取数据
            </summary>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <param name="page"></param>
            <param name="key"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SplitDemoController.GetById(System.Int64)">
            <summary>
            根据ID获取信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SplitDemoController.Post(Blog.Core.Model.Models.SplitDemo)">
            <summary>
            添加一条测试数据
            </summary>
            <param name="splitDemo"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SplitDemoController.Put(Blog.Core.Model.Models.SplitDemo)">
            <summary>
            修改一条测试数据
            </summary>
            <param name="splitDemo"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SplitDemoController.Delete(System.Int64)">
            <summary>
            根据id删除数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.SqlSugarTestController">
            <summary>
            SqlSugar 相关测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SqlSugarTestController.#ctor(SqlSugar.ISqlSugarClient)">
            <summary>
            SqlSugar 相关测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.SqlSugarTestController.ClearDbTableCache">
            <summary>
            测试建表后，SqlSugar缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Systems.CacheManageController">
            <summary>
            缓存管理
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.#ctor(Blog.Core.Common.Caches.Interface.ICaching)">
            <summary>
            缓存管理
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.Get">
            <summary>
            获取全部缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.Post(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            新增
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.Delete">
            <summary>
            删除全部缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.CacheManageController.Delete(System.String)">
            <summary>
            删除缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Systems.DataBaseController">
            <summary>
            数据库管理
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DataBaseController.GetAllConfig">
            <summary>
            获取库配置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DataBaseController.GetTableInfoList(System.String,Blog.Core.Model.Systems.DataBase.DataBaseReadType)">
            <summary>
            获取表信息
            </summary>
            <param name="configId">配置Id</param>
            <param name="readType">读取类型</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DataBaseController.GetColumnInfosByTableName(System.String,System.String,Blog.Core.Model.Systems.DataBase.DataBaseReadType)">
            <summary>
            获取表字段
            </summary>
            <param name="tableName">表名</param>
            <param name="configId">ConfigId</param>
            <param name="readType">读取类型</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DataBaseController.PutTableEditRemark(Blog.Core.Model.Systems.DataBase.EditTableInput)">
            <summary>
            编辑表备注
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DataBaseController.PutColumnEditRemark(Blog.Core.Model.Systems.DataBase.EditColumnInput)">
            <summary>
            编辑列备注
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController">
            <summary>
            动态建表 CURD
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController.GetDynamicType">
            <summary>
            动态type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController.GetDynamicType2">
            <summary>
            动态type 继承BaseEntity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController.TestCreateTable">
            <summary>
            测试建表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController.TestQuery">
            <summary>
            测试查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Systems.DynamicCodeFirstController.TestInsert(System.String,System.String)">
            <summary>
            测试写入
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Tenant.TenantByDbController">
            <summary>
            多租户-多库方案 测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByDbController.GetAll">
            <summary>
            获取租户下全部业务数据 <br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByDbController.Post(Blog.Core.Model.Models.SubLibraryBusinessTable)">
            <summary>
            新增数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Tenant.TenantByIdController">
            <summary>
            多租户-Id方案 测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByIdController.GetAll">
            <summary>
            获取租户下全部业务数据 <br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByIdController.Post(Blog.Core.Model.Models.BusinessTable)">
            <summary>
            新增业务数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Tenant.TenantByTableController">
            <summary>
            多租户-多表方案 测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByTableController.GetAll">
            <summary>
            获取租户下全部业务数据 <br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantByTableController.Post(Blog.Core.Model.Models.MultiBusinessTable)">
            <summary>
            新增数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Tenant.TenantManagerController">
            <summary>
            租户管理
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantManagerController.GetAll">
            <summary>
            获取全部租户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantManagerController.GetInfo(System.Int64)">
            <summary>
            获取租户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantManagerController.Post(Blog.Core.Model.Models.SysTenant)">
            <summary>
            新增租户信息 <br/>
            此处只做演示，具体要以实际业务为准
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantManagerController.Put(Blog.Core.Model.Models.SysTenant)">
            <summary>
            修改租户信息 <br/>
            此处只做演示，具体要以实际业务为准
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Tenant.TenantManagerController.Delete(System.Int64)">
            <summary>
            删除租户 <br/>
            此处只做演示，具体要以实际业务为准
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Test.EnumTestController">
            <summary>
            枚举测试
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.Test.EnumTestController.GetStudent(Blog.Core.Api.Controllers.Test.StudentType,System.Nullable{Blog.Core.Api.Controllers.Test.StudentType},System.Collections.Generic.List{Blog.Core.Api.Controllers.Test.StudentType})">
            <summary>
            获取学生信息
            </summary>
            <param name="studentType">学生类型</param>
            <param name="studentType2"></param>
            <param name="studentTypes"></param>
            <returns>学生信息</returns>
        </member>
        <member name="T:Blog.Core.Api.Controllers.Test.StudentType">
            <summary>
            学生类型
            </summary>
        </member>
        <member name="F:Blog.Core.Api.Controllers.Test.StudentType.PrimarySchool">
            <summary>
            小学生
            </summary>
        </member>
        <member name="F:Blog.Core.Api.Controllers.Test.StudentType.MiddleSchool">
            <summary>
            中学生
            </summary>
        </member>
        <member name="F:Blog.Core.Api.Controllers.Test.StudentType.University">
            <summary>
            大学生
            </summary>
        </member>
        <member name="P:Blog.Core.Api.Controllers.Test.Student.Name">
            <summary>
            学生姓名
            </summary>
        </member>
        <member name="P:Blog.Core.Api.Controllers.Test.Student.Age">
            <summary>
            学生年龄
            </summary>
        </member>
        <member name="P:Blog.Core.Api.Controllers.Test.Student.Type">
            <summary>
            学生类型
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:Blog.Core.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Blog.Core.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Blog.Core.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:Blog.Core.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Blog.Core.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Blog.Core.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Blog.Core.SwaggerHelper.CustomRouteAttribute.#ctor(Blog.Core.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
